generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int              @id @default(autoincrement())
  username     String           @unique
  email        String           @unique
  passwordHash String
  emailVerified Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  collections  UserCollection[]
  wantlist     UserWantlist[]
}

model Publisher {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  logoImage   String?
  createdAt   DateTime @default(now())
  tapes       Tape[]
}

model BoxSet {
  id          Int      @id @default(autoincrement())
  title       String
  year        Int?
  label       String?
  coverImage  String?
  description String?
  createdAt   DateTime @default(now())
  tapes       Tape[]   @relation("BoxSetTapes")
}

enum VideoStandard {
  NTSC
  PAL
  SECAM
  Other
}

enum PackagingType {
  slipcase
  clamshell
  big_box
  other
}

model Tape {
  id               Int              @id @default(autoincrement())
  title            String
  year             Int?
  genre            String?
  format           String?
  label            String?
  coverImage       String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  boxSetId         Int?
  publisherId      String?
  boxSet           BoxSet?          @relation("BoxSetTapes", fields: [boxSetId], references: [id])
  publisher        Publisher?       @relation(fields: [publisherId], references: [id])
  collections      UserCollection[]
  wantlist         UserWantlist[]

  // New fields for comprehensive VHS cataloging
  edition          String?
  releaseYear      Int
  vhsReleaseYear   Int
  runningTime      Int
  videoStandard    VideoStandard
  audioType        String
  packagingType    PackagingType
  distributor      String
  productionCompany String
  catalogNumber    String
  upcBarcode       String
  rating           String
  languages        String[]
  subtitles        String[]
  specialFeatures  String?
  physicalCondition String?

  @@unique([title, year])
}

model UserCollection {
  id        Int      @id @default(autoincrement())
  userId    Int
  tapeId    Int
  condition String?
  notes     String?
  addedAt   DateTime @default(now())
  tape      Tape     @relation(fields: [tapeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, tapeId])
}

model UserWantlist {
  id       String   @id @default(uuid())
  userId   Int
  tapeId   Int
  priority Int?
  notes    String?
  addedAt  DateTime @default(now())
  tape     Tape     @relation(fields: [tapeId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, tapeId])
}

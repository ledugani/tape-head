generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  username      String           @unique
  email         String           @unique
  passwordHash  String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  emailVerified Boolean          @default(true)
  collections   UserCollection[]
  wantlist      UserWantlist[]
}

model Publisher {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  logoImage   String?
  createdAt   DateTime @default(now())
  slug        String   @unique
  tapes       Tape[]
}

model BoxSet {
  id          Int      @id @default(autoincrement())
  title       String
  year        Int?
  label       String?
  coverImage  String?
  description String?
  createdAt   DateTime @default(now())
  tapes       Tape[]   @relation("BoxSetTapes")
}

model Tape {
  id                Int              @id @default(autoincrement())
  title             String
  year              Int?
  genre             String?
  format            String?
  label             String?
  coverImage        String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  boxSetId          Int?
  publisherId       String?
  audioType         String?
  catalogNumber     String?
  distributor       String?
  edition           String?
  languages         String[]
  packagingType     PackagingType?
  physicalCondition String?
  productionCompany String?
  rating            String?
  releaseYear       Int?
  runningTime       Int?
  specialFeatures   String?
  subtitles         String[]
  upcBarcode        String?
  vhsReleaseYear    Int?
  videoStandard     VideoStandard?
  boxSet            BoxSet?          @relation("BoxSetTapes", fields: [boxSetId], references: [id])
  publisher         Publisher?       @relation(fields: [publisherId], references: [id])
  collections       UserCollection[]
  wantlist          UserWantlist[]

  @@unique([title, year])
}

model UserCollection {
  id        Int      @id @default(autoincrement())
  userId    Int
  tapeId    Int
  condition String?
  notes     String?
  addedAt   DateTime @default(now())
  tape      Tape     @relation(fields: [tapeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, tapeId])
}

model UserWantlist {
  id       String   @id @default(uuid())
  userId   Int
  tapeId   Int
  priority Int?
  notes    String?
  addedAt  DateTime @default(now())
  tape     Tape     @relation(fields: [tapeId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, tapeId])
}

enum VideoStandard {
  NTSC
  PAL
  SECAM
  Other
}

enum PackagingType {
  slipcase
  clamshell
  big_box
  other
}

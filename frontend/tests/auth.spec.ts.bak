import { test, expect } from '@playwright/test';

test.describe('Authentication', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to login page and wait for it to be ready
    await page.goto('/login', { waitUntil: 'networkidle' });
    
    // Wait for the login form to be interactive
    await page.waitForSelector('[data-testid="login-button"]:not([disabled])');
    
    // Wait for hydration marker to be attached with the correct attribute
    await page.waitForSelector('#hydration-marker[data-hydrated="true"]', { timeout: 10000, state: 'attached' });
    
    // Clear any existing auth state
    await page.evaluate(() => {
      localStorage.clear();
      document.cookie.split(';').forEach(cookie => {
        document.cookie = cookie.replace(/^ +/, '').replace(/=.*/, `=;expires=${new Date(0).toUTCString()};path=/`);
      });
    });
  });

  test('should handle collection fetch with token refresh', async ({ page }) => {
    // Intercept login API and print response
    let loginResponseBody = null;
    await page.route('**/api/auth/login', async (route, request) => {
      const response = await route.fetch();
      loginResponseBody = await response.json();
      console.log('DEBUG login API response:', loginResponseBody);
      route.fulfill({ response });
    });

    // 1. Login
    await page.type('input[type="email"]', 'iamtest@test.com');
    await page.type('input[type="password"]', 'password1');
    
    // Wait for React to process the input
    await page.waitForTimeout(100);
    
    // Click login and wait for dashboard welcome
    await page.click('[data-testid="login-button"]');
    await page.waitForSelector('[data-testid="dashboard-welcome"]', { timeout: 10000 });

    // Wait for the page to be fully loaded
    await page.waitForLoadState('networkidle');

    // Debug: Print localStorage and cookies after login
    const debugState = await page.evaluate(() => ({
      accessToken: localStorage.getItem('access_token'),
      refreshToken: localStorage.getItem('refresh_token'),
      tokenExpiry: localStorage.getItem('token_expiry'),
      cookies: document.cookie
    }));
    console.log('DEBUG after login:', debugState);
    console.log('DEBUG login API response (from route):', loginResponseBody);

    // 2. Verify auth state
    expect(debugState.accessToken).toBeTruthy();
    expect(debugState.refreshToken).toBeTruthy();
    expect(debugState.tokenExpiry).toBeTruthy();
    expect(debugState.cookies).toContain('auth-token');
    expect(debugState.cookies).toContain('refresh_token');

    // 3. Force token expiry
    await page.evaluate(() => {
      localStorage.setItem('token_expiry', '1'); // Set expiry to 1 second ago
    });

    // 4. Navigate to collection tab
    await page.goto('/dashboard', { waitUntil: 'networkidle' });
    await page.click('text=Collection');

    // 5. Wait for collection to load
    await page.waitForSelector('[data-testid="collection-list"]');

    // 6. Verify collection data
    const collectionItems = await page.$$('[data-testid="collection-item"]');
    expect(collectionItems.length).toBeGreaterThan(0);

    // 7. Verify tokens were refreshed
    const finalState = await page.evaluate(() => ({
      accessToken: localStorage.getItem('access_token'),
      refreshToken: localStorage.getItem('refresh_token'),
      tokenExpiry: localStorage.getItem('token_expiry'),
      cookies: document.cookie
    }));

    expect(finalState.accessToken).toBeTruthy();
    expect(finalState.refreshToken).toBeTruthy();
    expect(finalState.tokenExpiry).toBeTruthy();
    expect(finalState.accessToken).not.toBe(debugState.accessToken); // Token should be different
  });

  test('should handle login correctly', async ({ page }) => {
    await page.goto('/login');
    
    // Fill in the login form
    await page.waitForSelector('[data-testid="login-button"]:not([disabled])');
    await page.fill('input[name="email"]', 'iamtest@test.com');
    await page.fill('input[name="password"]', 'password123');
    
    // Click the login button and wait for navigation
    await Promise.all([
      page.waitForURL('/dashboard'),
      page.click('button[type="submit"]')
    ]);
    
    // Verify auth cookie was set
    const cookies = await page.context().cookies();
    const authCookie = cookies.find(cookie => cookie.name === 'auth-token');
    expect(authCookie).toBeTruthy();
  });

  test('should handle login with remember me', async ({ page }) => {
    await page.goto('/login');
    await page.waitForSelector('[data-testid="login-button"]:not([disabled])');
    await page.fill('input[name="email"]', 'iamtest@test.com');
    await page.fill('input[name="password"]', 'password1');
    
    // Check the remember me checkbox and wait for state update
    await page.evaluate(() => {
      const checkbox = document.querySelector('input[name="rememberMe"]') as HTMLInputElement;
      checkbox.checked = true;
      checkbox.dispatchEvent(new Event('change', { bubbles: true }));
      checkbox.dispatchEvent(new Event('input', { bubbles: true }));
    });
    
    // Wait for checkbox to be checked
    await page.waitForFunction(() => {
      const checkbox = document.querySelector('input[name="rememberMe"]') as HTMLInputElement;
      return checkbox.checked;
    });
    
    console.log('Checkbox checked:', await page.evaluate(() => {
      const checkbox = document.querySelector('input[name="rememberMe"]') as HTMLInputElement;
      return checkbox.checked;
    }));
    
    // Submit the form
    await page.click('button[type="submit"]');
    
    // Wait for navigation to complete
    await page.waitForURL('/dashboard');
    
    // Get the auth cookie
    const cookies = await page.context().cookies();
    const authCookie = cookies.find(c => c.name === 'auth-token');
    
    // Verify cookie expiration (30 days)
    const expectedExpiry = Math.floor(Date.now() / 1000) + 30 * 24 * 60 * 60;
    const oneDay = 24 * 60 * 60;
    
    // Log the actual values for debugging
    console.log('Cookie expiration:', {
      expected: expectedExpiry,
      actual: authCookie?.expires,
      difference: authCookie?.expires ? expectedExpiry - authCookie.expires : 'N/A'
    });
    
    expect(authCookie?.expires).toBeGreaterThan(expectedExpiry - oneDay);
    expect(authCookie?.expires).toBeLessThan(expectedExpiry + oneDay);
  });

  test('should handle logout correctly', async ({ page }) => {
    // Log in first
    await page.goto('/login');
    await page.waitForSelector('[data-testid="login-button"]:not([disabled])');
    await page.fill('input[name="email"]', 'iamtest@test.com');
    await page.fill('input[name="password"]', 'password123');
    
    // Click login and wait for navigation
    await Promise.all([
      page.waitForURL('/dashboard'),
      page.click('button[type="submit"]')
    ]);
    
    // Verify we're logged in
    const cookiesBefore = await page.context().cookies();
    const authCookieBefore = cookiesBefore.find(cookie => cookie.name === 'auth-token');
    expect(authCookieBefore).toBeTruthy();
    
    // Wait for the logout button to be visible
    const logoutButton = await page.waitForSelector('button[data-testid="logout-button"]');
    
    // Click logout and wait for navigation
    await Promise.all([
      page.waitForURL(/\/login(\?.*)?$/),
      logoutButton.click()
    ]);
    
    // Verify auth cookie was cleared
    const cookiesAfter = await page.context().cookies();
    const authCookieAfter = cookiesAfter.find(cookie => cookie.name === 'auth-token');
    expect(authCookieAfter).toBeFalsy();
  });

  test('should redirect to login when accessing protected route without auth', async ({ page }) => {
    await page.goto('/dashboard');
    await expect(page).toHaveURL(/\/login\?from=%2Fdashboard$/);
  });

  test('should redirect to dashboard when accessing login with valid auth', async ({ page }) => {
    // First log in
    await page.goto('/login');
    await page.waitForSelector('[data-testid="login-button"]:not([disabled])');
    await page.fill('input[name="email"]', 'iamtest@test.com');
    await page.fill('input[name="password"]', 'password123');
    
    // Click login and wait for navigation
    await Promise.all([
      page.waitForURL('/dashboard'),
      page.click('button[type="submit"]')
    ]);
    
    // Then try to access login page again
    await page.goto('/login');
    await expect(page).toHaveURL('/dashboard');
  });

  test('should show loading state during authentication', async ({ page }) => {
    // Clear any existing auth state
    await page.context().clearCookies();
    
    // Navigate to protected route
    await page.goto('/dashboard');
    
    // Should show loading spinner immediately
    const loadingSpinner = await page.waitForSelector('[data-testid="loading-spinner"]', { state: 'visible', timeout: 5000 });
    expect(loadingSpinner).toBeTruthy();
    
    // Should eventually redirect to login
    await page.waitForURL(/\/login(\?.*)?$/);
    
    // Verify we're on the login page
    expect(page.url()).toContain('/login');
  });

  test('should preserve return URL after login', async ({ page }) => {
    // Try to access a protected route
    await page.goto('/dashboard');
    
    // Should be redirected to login with return URL
    await expect(page).toHaveURL(/\/login\?from=%2Fdashboard$/);
    
    // Log in
    await page.waitForSelector('[data-testid="login-button"]:not([disabled])');
    await page.fill('input[name="email"]', 'iamtest@test.com');
    await page.fill('input[name="password"]', 'password123');
    
    // Click login and wait for navigation
    await Promise.all([
      page.waitForURL('/dashboard'),
      page.click('button[type="submit"]')
    ]);
  });
}); 